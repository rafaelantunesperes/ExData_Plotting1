flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(falgs$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
tapply(iris$Sepal.Length, mean)
sapply(iris, mean)
apply(iris[,1:4], 1, mean)
apply(iris[,1:4], 2, mean)
data("mtcars")
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
v <- tapply(mtcars$hp, mtcars$cyl, mean)
v[,3] - v[,1]
v[3] - v[1]
debug(ls)
ls
0
0
iris
c
iris
library(datasets)
data("iris")
iris
tapply(iris$Sepal.Length, iris$Species, mean)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
dir()
created = h5createFile("example.h5")
created
install.packages("RMySQL", type = "source")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",password = "password", dbname="db")
install.packages("RMySQL")
library("RMySQL")
install.packages("sqldf")
library(httr)
?oauth_endpoints
oauth_endpoint()
oauth_endpoint("twitter")
?oauth_endpoint
oauth_endpoints()
oauth_endpoints("twitter")
oauth_endpoints("facebook")
oauth_endpoints("github")
github <- oauth_endpoints("github")
?oauth_app
myapp <- oauth_app("Coursera application", key = "9040a4156c87c0fa168c", secret = "4699670f98f391db18897c94006b0bf2a053beb9")
myapp
?oauth2.0_token
github_token <- oauth2.0_token(github, myapp)
0
install.packages(httpuv)
install.packages("httpuv")
github_token <- oauth2.0_token(github, myapp)
github_token <- oauth2.0_token(github, myapp, cache = FALSE)
?config
?with_config
?GET
GET("https://api.github.com/users/jtleek/repos")
GET("https://api.github.com/users/jtleek/repos", github_token)
?stop_for_status
?content
library(jsonlite)
GET("https://api.github.com/users/jtleek/repos", github_token)
raw_data <- GET("https://api.github.com/users/jtleek/repos", github_token)
raw_data$content
?fromJSON
json_data <- fromJSON(raw_data$content)
char_data <- rawToChar(raw_data$content)
char_data
json_data <- fromJSON(json_data)
json_data <- fromJSON(char_data)
json_data
json_data[[1]]
json_data[1]
class(json_data)
ncol(json_data)
nrow(json_data)
str(json_data)
json_data[[2]]
json_data[[3]]
json_data[[4]]
json_data[[5]]
json_data[[6]]
json_data[[7]]
colnames(json_data)
json_data$name
json_data$created_at
json_data$created_at[15]
subset_data <- subset.data.frame(json_data, json_data$name == "datasharing")
subset_data
subset_data$created_at
setwd("Cousera/GetCleanData/w2")
library(swirl)
swirl()
install_course("Getting and Cleaning Data")
swirl()
mydf <- read.csv("path2csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dyplr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cram, ip_dp, package, country)
select(cran, ip_dp, package, country)
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size * 10^3)
mutate(cran3, correct_size = size + 10^3)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes - mean(size))
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
library(swirl)
swirl()
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
??chain
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class_5")
parse_number("class5")
submit()
submit()
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?select
submit()
submit()
submit()
library(swril)
library("swril")
library("swirl")
swirl()
2
0
0
exit
library("swirl")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
dmy("192012")
ymd("192012")
ymd("1/9/2012")
ymd("1-9-2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment)
this_moment <- update(this_moment, hours())
this_moment <- update(this_moment, hours = 17, minutes = 22)
this_moment
?now
nyc <- now("Americ/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(quantmod)
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
head(amzn)
sampleTimes
class(sampleTimes)
2012_amzn <- with(sampleTimes, sampleTimes >= 2012-01-01 & sampleTimes <= 2012-12-31)
2012amzn <- with(sampleTimes, sampleTimes >= 2012-01-01 & sampleTimes <= 2012-12-31)
amzn_2012 <- with(sampleTimes, sampleTimes >= 2012-01-01 & sampleTimes <= 2012-12-31)
amzn_2012 <- with(sampleTimes, sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31")
amzn_2012 <- with(sampleTimes, sampleTimes[sampleTimes >= "2012-01-01" & sampleTimes <= "2012-12-31"])
head(times)
library(dplyr)
library(lubridate)
times <- sampleTimes %>%
mutate(year = year(sampleTimes))
library(dplyr)
library(lubridate)
times <- as.data.frame(sampleTimes) %>%
mutate(year = year(sampleTimes))
head(times)
library(dplyr)
library(lubridate)
times <- as.data.frame(sampleTimes) %>%
mutate(year = year(sampleTimes)) %>%
filter(year == 2012)
library(dplyr)
library(lubridate)
times <- as.data.frame(sampleTimes) %>%
mutate(year = year(sampleTimes), day = wday(sampleTimes)) #%>%
head(times)
?wday
library(dplyr)
library(lubridate)
times <- as.data.frame(sampleTimes) %>%
mutate(year = year(sampleTimes), day = wday(sampleTimes, label = T)) #%>%
head(times)
library(dplyr)
library(lubridate)
times <- as.data.frame(sampleTimes) %>%
mutate(year = year(sampleTimes), day = wday(sampleTimes, label = T)) %>%
filter(day == seg)
library(dplyr)
library(lubridate)
times <- as.data.frame(sampleTimes) %>%
mutate(year = year(sampleTimes), day = wday(sampleTimes, label = T)) %>%
filter(day == "seg")
library(dplyr)
library(lubridate)
times <- as.data.frame(sampleTimes) %>%
mutate(year = year(sampleTimes), day = wday(sampleTimes, label = T)) %>%
filter(year == 2012 & day == "seg")
install.packages("tidyverse")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pollution, pm25~region, col = "red")
boxplot(pollution, pm25 ~ region, col = "red")
boxplot(pollution, col = "red")
boxplot(pm25~region, pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "wset")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruption, waiting))
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4, 1))
xyplot(Life.Exp ~ Income | region, state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, mpg)
qplot(aes(displ, hwy), mpg)
qplot(displ, hwy, dataset = mpg)
qplot(displ, hwy, data set = mpg)
qplot(displ, hwy, data = mpg)
?hist
library(swirl)
swirl()
library(swirl)
swirl()
library(dplyr)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
library(tidyr)
stocks <- data.frame(
+     time = as.Date('2009-01-01') + 0:9,
+     X = rnorm(10, 0, 1),
+     Y = rnorm(10, 0, 2),
+     Z = rnorm(10, 0, 4)
+ )
stocks <- data.frame()
stocks <- data.frame(time = as.Date("2009-01-01")+ 0:9, X = rnorm(10,0,1), Y = rnorm(10, 0, 2), Z = rnorm(10,0,4))
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title("Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title("Ozone and Wind in New York City")
lenght(par())
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title("Wind and Ozone in NYC")
may <- airquality[airquality$Month == 5]
may <- airquality[airquality$Month == 5,]
may
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone,pch = 17, col = "blue" )
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", pch = c(17,8), col = c("blue", "red"), legend =  c("May", "Other Months"))
abline(v = median(airquality$Wind), lty = 2, lwy = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = (1,2))
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, title = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main =  = "Ozone and Wind")
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
#Set correct wd
path <- "Coursera/ExploratoryData/ExData_Plotting1"
setwd(path)
